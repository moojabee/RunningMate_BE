<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "https://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.lswr.demo.model.dao.MyPageDao">
    
    <!-- 유저 정보 조회 -->
    <select id="getUserInfo" parameterType="long" resultType="com.lswr.demo.model.dto.MyPage">
        SELECT 
            u.user_id AS userId,
            u.nickname,
            u.address,
            u.user_img AS userImg,
            ROUND(COALESCE(SUM(r.distance), 0), 2) AS userDist,
            CONCAT(
                FLOOR(SUM(TIMESTAMPDIFF(SECOND, r.start_time, r.end_time)) / SUM(r.distance) / 60), "'",
                LPAD(MOD(SUM(TIMESTAMPDIFF(SECOND, r.start_time, r.end_time)) / SUM(r.distance), 60), 2, '0'), "''"
            ) AS userPace,
            (SELECT COUNT(*) FROM Board b WHERE b.user_id = u.user_id) AS boardNum,
            (SELECT COUNT(*) FROM Following f WHERE f.following_id = u.user_id AND f.status = 1) AS followerNum,
            (SELECT COUNT(*) FROM Following f WHERE f.user_id = u.user_id AND f.status = 1) AS followingNum
        FROM User u
        LEFT JOIN Run r ON u.user_id = r.user_id
        WHERE u.user_id = #{userId}
        GROUP BY u.user_id, u.nickname, u.user_img
    </select>

    <!-- 유저 게시글 조회 -->
    <select id="getUserBoards" parameterType="long" resultMap="BoardResultMap">
        SELECT 
            b.board_id, b.user_id, b.content, b.posted_date,
            u.nickname AS userNickname,
            u.user_img AS userImg,
            ROUND(COALESCE(SUM(r.distance), 0), 2) AS userDist,
            CONCAT(
                FLOOR(SUM(TIMESTAMPDIFF(SECOND, r.start_time, r.end_time)) / SUM(r.distance) / 60), "'",
                LPAD(MOD(SUM(TIMESTAMPDIFF(SECOND, r.start_time, r.end_time)) / SUM(r.distance), 60), 2, '0'), "''"
            ) AS userPace
        FROM Board b
        JOIN User u ON b.user_id = u.user_id
        LEFT JOIN Run r ON b.user_id = r.user_id
        WHERE b.user_id = #{userId}
        GROUP BY b.board_id, b.user_id, b.content, b.posted_date, u.nickname, u.user_img
        ORDER BY b.posted_date DESC <!-- 게시글을 최신순으로 정렬 -->
    </select>
    
    <!-- 사용자가 해당 게시글을 좋아요 눌렀는지 확인 -->
	<select id="isLikedByUser" resultType="boolean">
	    SELECT COUNT(*) > 0
	    FROM `Like`
	    WHERE user_id = #{userId} AND board_id = #{boardId}
	</select>
	
	<!-- 좋아요 추가 -->
	<insert id="addLike">
	    INSERT INTO `Like` (user_id, board_id)
	    VALUES (#{userId}, #{boardId})
	</insert>
	
	<!-- 좋아요 제거 -->
	<delete id="removeLike">
	    DELETE FROM `Like`
	    WHERE user_id = #{userId} AND board_id = #{boardId}
	</delete>
    

    <!-- 유저 런닝 기록 조회 -->
	<select id="getUserRuns" parameterType="long" resultType="com.lswr.demo.model.dto.Run">
	    SELECT 
	        r.run_id AS runId,
	        r.user_id AS userId,
	        r.run_img AS runImg,
	        r.distance AS dist,
	        CONCAT(
	            FLOOR((TIMESTAMPDIFF(SECOND, r.start_time, r.end_time) / r.distance) / 60), "'",
	            LPAD(MOD((TIMESTAMPDIFF(SECOND, r.start_time, r.end_time) / r.distance), 60), 2, '0'), "''"
	        ) AS pace,
	        r.start_time AS startTime
	    FROM Run r
	    WHERE r.user_id = #{userId}
	    ORDER BY r.start_time DESC
	</select>


    <resultMap id="BoardResultMap" type="com.lswr.demo.model.dto.Board">
        <id property="boardId" column="board_id"/>
        <result property="userId" column="user_id"/>
        <result property="content" column="content"/>
        <result property="postedDate" column="posted_date"/>
        <result property="userDist" column="userDist"/>
        <result property="userPace" column="userPace"/>
        <result property="nickname" column="userNickname"/>
        <result property="userImg" column="userImg"/>

        <!-- 댓글 리스트 매핑 -->
        <collection property="comment" ofType="com.lswr.demo.model.dto.Comment" column="board_id" select="getCommentByBoardId"/>

        <!-- 좋아요 리스트 매핑 -->
        <collection property="like" ofType="com.lswr.demo.model.dto.Like" column="board_id" select="getLikeByBoardId"/>

        <!-- 게시글 이미지 리스트 매핑 -->
        <collection property="boardImg" ofType="com.lswr.demo.model.dto.BoardImg" column="board_id" select="getBoardImgByBoardId"/>
    </resultMap>

    <!-- 댓글 정보 조회 쿼리 -->
    <select id="getCommentByBoardId" parameterType="long" resultType="com.lswr.demo.model.dto.Comment">
        SELECT * 
        FROM Comment
        WHERE board_id = #{boardId}
    </select>

    <!-- 좋아요 정보 조회 쿼리 -->
    <select id="getLikeByBoardId" parameterType="long" resultType="com.lswr.demo.model.dto.Like">
        SELECT like_id, user_id, board_id
        FROM `Like`
        WHERE board_id = #{boardId}
    </select>

    <!-- 게시글 이미지 정보 조회 쿼리 -->
    <select id="getBoardImgByBoardId" parameterType="long" resultType="com.lswr.demo.model.dto.BoardImg">
        SELECT img_id, board_id, board_url
        FROM BoardImg
        WHERE board_id = #{boardId}
    </select>
    
    
    <!-- 게시글 이미지 삽입 -->
    <insert id="insertMyBoardImg" parameterType="com.lswr.demo.model.dto.BoardImg">
        INSERT INTO BoardImg (board_id, board_url)
        VALUES (#{boardId}, #{boardUrl})
    </insert>
    
    
    <!-- 게시글 수정 -->
    <update id="updateMyBoard" parameterType="com.lswr.demo.model.dto.Board">
        UPDATE Board
        SET content = #{content}
        WHERE board_id = #{boardId} AND user_id = #{userId}
    </update>

    <!-- 삭제할 특정 이미지들만 삭제 -->
	<delete id="deleteMyBoardImgByIds">
	    DELETE FROM BoardImg
	    WHERE img_id IN
	    <foreach item="id" collection="list" open="(" separator="," close=")">
	        #{id}
	    </foreach>
	</delete>
    

    <!-- 게시글 삭제 -->
    <delete id="deleteMyBoard" parameterType="com.lswr.demo.model.dto.Board">
        DELETE FROM Board
        WHERE board_id = #{boardId} AND user_id = #{userId}
    </delete>
    
	
	<!-- 사용자가 해당 게시글을 좋아요 눌렀는지 확인 -->
	<select id="isLikedMyBoard" resultType="boolean">
	    SELECT COUNT(*) > 0
	    FROM `Like`
	    WHERE user_id = #{userId} AND board_id = #{boardId}
	</select>
	
	<!-- 좋아요 추가 -->
	<insert id="addLikeMyBoard">
	    INSERT INTO `Like` (user_id, board_id)
	    VALUES (#{userId}, #{boardId})
	</insert>
	
	<!-- 좋아요 제거 -->
	<delete id="removeLikeMyBoard">
	    DELETE FROM `Like`
	    WHERE user_id = #{userId} AND board_id = #{boardId}
	</delete>


	<!-- 계정 공개 여부 확인 -->
    <select id="isPrivate" parameterType="long" resultType="int">
        SELECT private
        FROM User
        WHERE user_id = #{userId}
    </select>

    <!-- 팔로워 여부 확인 -->
    <select id="isFollower" parameterType="map" resultType="int">
        SELECT COUNT(*)
	    FROM Following
	    WHERE user_id = #{loginId} 
	      AND following_id = #{writerId}
	      AND status = 1
    </select>
    
    <!-- 팔로우 요청 여부 확인 -->
	<select id="isFollowRequest" parameterType="map" resultType="int">
	    SELECT COUNT(*)
	    FROM Following
	    WHERE user_id = #{loginId}
	      AND following_id = #{writerId}
	      AND status = 0
	</select>
    
    
    <!-- 개인정보 수정 -->
	<update id="updateUserInfo" parameterType="User">
	    UPDATE User
	    <set>
	        <if test="password != null and password != ''">
	            password = #{password},
	        </if>
	        <if test="nickname != null and nickname != ''">
	            nickname = #{nickname},
	        </if>
	        <if test="address != null and address != ''">
	            address = #{address},
	        </if>
            <if test="userImg != null">
	            user_img = #{userImg}, <!-- userImg가 제공되면 그대로 업데이트 -->
	        </if>
	        <if test="userImg == null">
	            user_img = NULL, <!-- userImg가 null이면 NULL로 설정 -->
	        </if>
	    </set>
	    WHERE user_id = #{userId}
	</update>
    
    <!-- 팔로워 리스트 -->
    <select id="findFollower" parameterType="long" resultType="Follow">
	    SELECT 
	        u.user_id AS userId,
	        u.nickname AS nickname,
	        u.user_img AS userImg,
	        ROUND(COALESCE(SUM(r.distance), 0), 2) AS userDist,
	        CONCAT(
	            FLOOR(SUM(TIMESTAMPDIFF(SECOND, r.start_time, r.end_time)) / SUM(r.distance) / 60), "'",
	            LPAD(MOD(SUM(TIMESTAMPDIFF(SECOND, r.start_time, r.end_time)) / SUM(r.distance), 60), 2, '0'), "''"
	        ) AS userPace,
	        f.status AS status
	    FROM User u
	    LEFT JOIN Run r ON u.user_id = r.user_id
	    JOIN Following f ON f.user_id = u.user_id
	    WHERE f.following_id = #{userId}
	    GROUP BY u.user_id, u.nickname, f.status
	</select>
	
	<!-- 팔로잉 리스트 -->
	<select id="findFollowing" parameterType="long" resultType="Follow">
	    SELECT 
	        u.user_id AS userId,
	        u.nickname AS nickname,
	        u.user_img AS userImg,
	        ROUND(COALESCE(SUM(r.distance), 0), 2) AS userDist,
	        CONCAT(
	            FLOOR(SUM(TIMESTAMPDIFF(SECOND, r.start_time, r.end_time)) / SUM(r.distance) / 60), "'",
	            LPAD(MOD(SUM(TIMESTAMPDIFF(SECOND, r.start_time, r.end_time)) / SUM(r.distance), 60), 2, '0'), "''"
	        ) AS userPace,
	        f.status AS status
	    FROM User u
	    LEFT JOIN Run r ON u.user_id = r.user_id
	    JOIN Following f ON f.following_id = u.user_id
	    WHERE f.user_id = #{userId}
	    GROUP BY u.user_id, u.nickname, f.status
	</select>
	
    <!-- 팔로우 추가 -->
    <insert id="insertFollowing" parameterType="map">
        INSERT INTO Following (user_id, following_id, status)
        VALUES (#{loginId}, #{targetId}, #{status})
    </insert>
	
	<!-- 팔로워 삭제 -->
    <delete id="deleteFollower" parameterType="map">
        DELETE FROM Following
        WHERE user_id = #{targetId} AND following_id = #{loginId}
    </delete>

    <!-- 팔로잉 삭제 -->
    <delete id="deleteFollowing" parameterType="map">
        DELETE FROM Following
        WHERE user_id = #{loginId} AND following_id = #{targetId}
    </delete>

    <!-- 팔로우 상태 수정 -->
    <update id="updateFollowStatus" parameterType="map">
        UPDATE Following
        SET status = 1
        WHERE user_id = #{targetId} AND following_id = #{loginId} AND status = 0
    </update>
    
</mapper>