<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "https://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.lswr.demo.model.dao.BoardDao">
	
    <!-- userId 목록 조회 - 팔로잉 -->
    <select id="getFollowingUserIds" parameterType="long" resultType="long">
        SELECT following_id
        FROM Following
        WHERE user_id = #{userId} AND status = 1
        UNION
	    SELECT #{userId}
    </select>

    <!-- userId 목록 조회 - 주소 -->
    <select id="getUserIdsByAddress" parameterType="string" resultType="long">
        SELECT user_id
        FROM User
        WHERE address = #{address} AND private = 1
    </select>

    <!-- userId로 address 조회 -->
    <select id="getAddress" parameterType="long" resultType="string">
        SELECT address
        FROM User
        WHERE user_id = #{userId}
    </select>
    
    <!-- 현재 유저 공개 여부 조회 -->
	<select id="getPrivateStatus" parameterType="long" resultType="int">
	    SELECT private
	    FROM User
	    WHERE user_id = #{userId}
	</select>

	<!-- 게시글 정보 조회 쿼리 (유저 ID 목록을 필터로 사용) -->
	<select id="getBoardsByUserIds" parameterType="list" resultMap="BoardResultMap">
	    SELECT b.board_id, b.user_id, b.content, b.posted_date,
	           u.nickname AS userNickname,
	           u.user_img AS userImg,
	           ROUND(COALESCE(SUM(r.distance), 0), 2) AS userDist,
	           CONCAT(
	               FLOOR(SUM(TIMESTAMPDIFF(SECOND, r.start_time, r.end_time)) / SUM(r.distance) / 60), "'",
	               LPAD(MOD(SUM(TIMESTAMPDIFF(SECOND, r.start_time, r.end_time)) / SUM(r.distance), 60), 2, '0'), "''"
	           ) AS userPace
	    FROM Board b
	    JOIN User u ON b.user_id = u.user_id
	    LEFT JOIN Run r ON b.user_id = r.user_id
	    WHERE b.user_id IN
	    <foreach item="userId" collection="userIds" open="(" separator="," close=")">
	        #{userId}
	    </foreach>
	    GROUP BY b.board_id, b.user_id, b.content, b.posted_date, u.nickname, u.user_img
	    ORDER BY b.posted_date DESC
	</select>
	
	<!-- BoardResultMap: Board와 관련된 Comment, Like, Store 테이블 데이터를 가져오는 설정 -->
	<resultMap id="BoardResultMap" type="com.lswr.demo.model.dto.Board">
	    <id property="boardId" column="board_id"/>
	    <result property="userId" column="user_id"/>
	    <result property="content" column="content"/>
	    <result property="postedDate" column="posted_date"/>
	    <result property="userDist" column="userDist"/>
	    <result property="userPace" column="userPace"/>
	    <result property="nickname" column="userNickname"/>
		<result property="userImg" column="userImg" />
		
	    <!-- 댓글 리스트 매핑 -->
	    <collection property="comment" ofType="com.lswr.demo.model.dto.Comment" column="board_id" select="getCommentByBoardId"/>
	
	    <!-- 좋아요 리스트 매핑 -->
	    <collection property="like" ofType="com.lswr.demo.model.dto.Like" column="board_id" select="getLikeByBoardId"/>
	
	    <!-- 게시글 이미지 리스트 매핑 -->
	    <collection property="boardImg" ofType="com.lswr.demo.model.dto.BoardImg" column="board_id" select="getBoardImgByBoardId"/>
	</resultMap>


    <!-- 댓글 정보 조회 쿼리 -->
    <select id="getCommentByBoardId" parameterType="long" resultType="com.lswr.demo.model.dto.Comment">
	    SELECT * 
	    FROM Comment
	    WHERE board_id = #{boardId}
	</select>

    <!-- 좋아요 정보 조회 쿼리 -->
    <select id="getLikeByBoardId" parameterType="long" resultType="com.lswr.demo.model.dto.Like">
        SELECT like_id, user_id, board_id
        FROM `Like`
        WHERE board_id = #{boardId}
    </select>

    <!-- 게시글 이미지 정보 조회 쿼리 -->
    <select id="getBoardImgByBoardId" parameterType="long" resultType="com.lswr.demo.model.dto.BoardImg">
        SELECT img_id, board_id, filename
        FROM Store
        WHERE board_id = #{boardId}
    </select>


	<!-- 게시글 삽입 -->
    <insert id="insertBoard" parameterType="com.lswr.demo.model.dto.Board" useGeneratedKeys="true" keyProperty="boardId">
        INSERT INTO Board (user_id, content, posted_date)
        VALUES (#{userId}, #{content}, NOW())
    </insert>

    <!-- 게시글 이미지 삽입 -->
    <insert id="insertBoardImg" parameterType="com.lswr.demo.model.dto.BoardImg">
        INSERT INTO Store (board_id, filename)
        VALUES (#{boardId}, #{fileName})
    </insert>
    
    
    <!-- 게시글 수정 -->
    <update id="updateBoard" parameterType="com.lswr.demo.model.dto.Board">
        UPDATE Board
        SET content = #{content}
        WHERE board_id = #{boardId} AND user_id = #{userId}
    </update>

    <!-- 삭제할 특정 이미지들만 삭제 -->
	<delete id="deleteBoardImgByIds">
	    DELETE FROM Store
	    WHERE img_id IN
	    <foreach item="id" collection="list" open="(" separator="," close=")">
	        #{id}
	    </foreach>
	</delete>
    

    <!-- 게시글 삭제 -->
    <delete id="deleteBoard" parameterType="com.lswr.demo.model.dto.Board">
        DELETE FROM Board
        WHERE board_id = #{boardId} AND user_id = #{userId}
    </delete>
    
	
	<!-- 사용자가 해당 게시글을 좋아요 눌렀는지 확인 -->
	<select id="isLikedByUser" resultType="boolean">
	    SELECT COUNT(*) > 0
	    FROM `Like`
	    WHERE user_id = #{userId} AND board_id = #{boardId}
	</select>
	
	<!-- 좋아요 추가 -->
	<insert id="addLike">
	    INSERT INTO `Like` (user_id, board_id)
	    VALUES (#{userId}, #{boardId})
	</insert>
	
	<!-- 좋아요 제거 -->
	<delete id="removeLike">
	    DELETE FROM `Like`
	    WHERE user_id = #{userId} AND board_id = #{boardId}
	</delete>
	
	
</mapper>